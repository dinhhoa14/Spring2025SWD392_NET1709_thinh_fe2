import { userService } from "@src/services/userService.js";
import { useEffect } from "react";
import { useForm } from "react-hook-form";
import {
    FaUser, FaCalendarAlt, FaVenusMars, FaTimes,
    FaHospital, FaExclamationTriangle, FaRulerVertical, FaWeight
} from 'react-icons/fa';
import { toast } from "react-toastify";
import { Modal, Box, Typography, Button } from "@mui/material";

const EditProfileChild = ({ onClose, isOpen, childId }) => {
    const { register, handleSubmit, formState: { errors }, setValue } = useForm();
    useEffect(() => {
        const fetchChild = async () => {
            const reponse = await userService.getChildById(childId);
            setValue("childName", reponse.childName);
            setValue("childGender", reponse.childGender);
            setValue("dateOfBirth", reponse.dateOfBirth);
            setValue("birthPlace", reponse.birthPlace);
            setValue("birthMethod", reponse.birthMethod);
            setValue("birthWeight", reponse.birthWeight);
            setValue("birthHeight", reponse.birthHeight);
            setValue("abnormalities", reponse.abnormalities);
        }

        fetchChild();
    }, [childId]);


    // Set default values for the form if childInfo is provided
    // if (childInfo) {
    //     setValue("childName", childInfo.childName);
    //     setValue("childGender", childInfo.childGender);
    //     setValue("dateOfBirth", childInfo.dateOfBirth);
    //     setValue("birthPlace", childInfo.birthPlace);
    //     setValue("birthMethod", childInfo.birthMethod);
    //     setValue("birthWeight", childInfo.birthWeight);
    //     setValue("birthHeight", childInfo.birthHeight);
    //     setValue("abnormalities", childInfo.abnormalities);
    // }

    if (!isOpen) return null; // ·∫®n modal n·∫øu ch∆∞a m·ªü

    const onSubmit = async (data) => {
        const updatedData = {
            ...data,
            id: childId, // Gi·ªØ l·∫°i ID c·ªßa tr·∫ª ƒë·ªÉ c·∫≠p nh·∫≠t
        };

        const response = await userService.updateChildProfile(updatedData); // S·ª≠ d·ª•ng API update
        if (!response) {
            toast.error("‚ùå C·∫≠p nh·∫≠t h·ªì s∆° cho tr·∫ª th·∫•t b·∫°i!");
        } else {
            toast.success("üéâ C·∫≠p nh·∫≠t h·ªì s∆° cho tr·∫ª th√†nh c√¥ng!");
            onClose();
        }
    };

    return (
        <Modal open={isOpen} onClose={onClose}>
            <Box sx={modalStyle}>
                {/* N√∫t ƒë√≥ng modal */}
                <Button
                    onClick={onClose}
                    sx={{ position: "absolute", top: 10, right: 10, color: "gray" }}
                >
                    <FaTimes size={20} />
                </Button>

                <Typography variant="h5" textAlign="center" fontWeight="bold" mb={3}>
                    Ch·ªânh s·ª≠a h·ªì s∆° cho tr·∫ª
                </Typography>

                <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
                    {/* H·ªç v√† t√™n c·ªßa tr·∫ª */}
                    <div>
                        <label className="block text-gray-700 font-semibold mb-1">H·ªç v√† t√™n</label>
                        <div className="relative flex items-center border-b-2">
                            <FaUser className="text-gray-500 mr-3" />
                            <input
                                {...register("childName", { required: true })}
                                placeholder="Nh·∫≠p h·ªç v√† t√™n"
                                className="w-full p-2 focus:outline-none"
                            />
                        </div>
                        {errors.childName && <span className="text-red-500 text-sm">Nh·∫≠p h·ªç v√† t√™n</span>}
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                        {/* Gi·ªõi t√≠nh */}
                        <div className="mt-3">
                            <label className="block text-gray-700 font-semibold mb1 ">Gi·ªõi t√≠nh</label>
                            <div className="relative flex items-center border-b-2">
                                <FaVenusMars className="text-gray-500 mr-3" />
                                <select
                                    {...register("childGender", { required: true })}
                                    className="w-full p-2 focus:outline-none text-center"
                                >
                                    <option value="">----Ch·ªçn gi·ªõi t√≠nh----</option>
                                    <option value="F">N·ªØ</option>
                                    <option value="M">Nam</option>
                                </select>
                            </div>
                            {errors.childGender && <span className="text-red-500 text-sm">Ch·ªçn gi·ªõi t√≠nh</span>}
                        </div>

                        {/* Ng√†y sinh */}
                        <div>
                            <label className="block text-gray-700 font-semibold mb-1">Ng√†y sinh</label>
                            <div className="relative flex items-center border-b-2">
                                <FaCalendarAlt className="text-gray-500 mr-3" />
                                <input
                                    {...register("dateOfBirth", { required: true })}
                                    type="datetime-local"
                                    className="w-full p-2 focus:outline-none"
                                />
                            </div>
                            {errors.dateOfBirth && <span className="text-red-500 text-sm">Nh·∫≠p ng√†y sinh</span>}
                        </div>
                    </div>

                    {/* N∆°i sinh */}
                    <div>
                        <label className="block text-gray-700 font-semibold mb-1">N∆°i sinh</label>
                        <div className="relative flex items-center border-b-2">
                            <FaHospital className="text-gray-500 mr-3" />
                            <input
                                {...register("birthPlace", { required: true })}
                                placeholder="Nh·∫≠p n∆°i sinh"
                                className="w-full p-2 focus:outline-none"
                            />
                        </div>
                        {errors.birthPlace && <span className="text-red-500 text-sm">Nh·∫≠p n∆°i sinh</span>}
                    </div>

                    {/* Ph∆∞∆°ng ph√°p sinh */}
                    <div>
                        <label className="block text-gray-700 font-semibold mb-1">Ph∆∞∆°ng ph√°p sinh</label>
                        <div className="relative flex items-center border-b-2">
                            <FaHospital className="text-gray-500 mr-3" />
                            <select
                                {...register("birthMethod", { required: true })}
                                className="w-full p-2 focus:outline-none text-center"
                            >
                                <option value="">----Ch·ªçn ph∆∞∆°ng ph√°p sinh----</option>
                                <option value="Sinh th∆∞·ªùng">Sinh th∆∞·ªùng</option>
                                <option value="Sinh m·ªï">Sinh m·ªï</option>
                            </select>
                        </div>
                        {errors.birthMethod && <span className="text-red-500 text-sm">Ch·ªçn ph∆∞∆°ng ph√°p sinh</span>}
                    </div>

                    <div className="grid grid-cols-2 gap-4">
                        {/* C√¢n n·∫∑ng khi sinh */}
                        <div>
                            <label className="block text-gray-700 font-semibold mb-1">C√¢n n·∫∑ng (kg)</label>
                            <div className="relative flex items-center border-b-2">
                                <FaWeight className="text-gray-500 mr-3" />
                                <input
                                    {...register("birthWeight", { required: true, valueAsNumber: true })}
                                    type="number"
                                    step="0.1"
                                    placeholder="Nh·∫≠p c√¢n n·∫∑ng (kg)"
                                    className="w-full p-2 focus:outline-none"
                                />
                            </div>
                            {errors.birthWeight && <span className="text-red-500 text-sm">Nh·∫≠p c√¢n n·∫∑ng h·ª£p l·ªá</span>}
                        </div>

                        {/* Chi·ªÅu cao khi sinh */}
                        <div>
                            <label className="block text-gray-700 font-semibold mb-1">Chi·ªÅu cao (cm)</label>
                            <div className="relative flex items-center border-b-2">
                                <FaRulerVertical className="text-gray-500 mr-3" />
                                <input
                                    {...register("birthHeight", { required: true, valueAsNumber: true })}
                                    type="number"
                                    step="0.1"
                                    placeholder="Nh·∫≠p chi·ªÅu cao (cm)"
                                    className="w-full p-2 focus:outline-none"
                                />
                            </div>
                            {errors.birthHeight && <span className="text-red-500 text-sm">Nh·∫≠p chi·ªÅu cao h·ª£p l·ªá</span>}
                        </div>
                    </div>

                    {/* B·∫•t th∆∞·ªùng khi sinh */}
                    <div>
                        <label className="block text-gray-700 font-semibold mb-1">B·∫•t th∆∞·ªùng khi sinh</label>
                        <div className="relative flex items-center border-b-2">
                            <FaExclamationTriangle className="text-gray-500 mr-3" />
                            <input
                                {...register("abnormalities")}
                                placeholder="Ghi ch√∫ (n·∫øu c√≥)"
                                className="w-full p-2 focus:outline-none"
                            />
                        </div>
                    </div>

                    {/* N√∫t Submit */}
                    <button
                        type="submit"
                        className="w-full bg-blue-500 hover:bg-blue-600 text-white p-3 rounded-lg font-semibold transition"
                    >
                        C·∫≠p nh·∫≠t h·ªì s∆°
                    </button>
                </form>
            </Box>
        </Modal>
    );
};

// Style cho modal
const modalStyle = {
    position: "absolute",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: 500,
    bgcolor: "background.paper",
    borderRadius: 2,
    boxShadow: 24,
    p: 4,
    outline: "none",
};

export default EditProfileChild;
